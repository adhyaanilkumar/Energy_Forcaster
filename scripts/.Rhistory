# Load required libraries
library(forecast)
library(dplyr)
library(ggplot2)
library(readr)
library(plotly)
# Set dataset path
dataset_folder <- "C:/git/Energy-Consumption-Forecasting/datasets"
merged_data_path <- file.path(dataset_folder, "merged_energy_data.csv")
feature_engineered_path <- file.path(dataset_folder, "feature_engineered_energy_data.csv")
# Load the merged and feature-engineered datasets
merged_data <- read_csv(merged_data_path, show_col_types = FALSE)
feature_engineered_data <- read_csv(feature_engineered_path, show_col_types = FALSE)
# Merge the feature-engineered dataset with the merged dataset
combined_data <- full_join(merged_data, feature_engineered_data, by = c("country", "year"))
# Filter out the data needed for forecasting
forecast_data <- combined_data %>%
select(country, year, primary_energy_consumption, gdp, population, renewables_consumption) %>%
filter(!is.na(primary_energy_consumption))
# Load required libraries
library(forecast)
library(dplyr)
library(ggplot2)
library(readr)
library(plotly)
# Set dataset path
dataset_folder <- "C:/git/Energy-Consumption-Forecasting/datasets"
merged_data_path <- file.path(dataset_folder, "merged_energy_data.csv")
feature_engineered_path <- file.path(dataset_folder, "feature_engineered_energy_data.csv")
# Load the merged and feature-engineered datasets
merged_data <- read_csv(merged_data_path, show_col_types = FALSE)
feature_engineered_data <- read_csv(feature_engineered_path, show_col_types = FALSE)
# Check column names to make sure we are using the correct one
print(colnames(merged_data))
print(colnames(feature_engineered_data))
# Merge the feature-engineered dataset with the merged dataset
combined_data <- full_join(merged_data, feature_engineered_data, by = c("country", "year"))
# Check if 'primary_energy_consumption' exists or find the correct column
if ("primary_energy_consumption" %in% colnames(combined_data)) {
print("Column 'primary_energy_consumption' found")
} else {
# If not, print out the columns to debug
print("Column 'primary_energy_consumption' not found. Please check the column names.")
}
# Filter out the data needed for forecasting
forecast_data <- combined_data %>%
select(country, year, primary_energy_consumption, gdp, population, renewables_consumption) %>%
filter(!is.na(primary_energy_consumption))
library(shiny); runApp('C:/git/Energy-Consumption-Forecasting/scripts/Forecast.R')
runApp('C:/git/Energy-Consumption-Forecasting/scripts/Forecast.R')
runApp('C:/git/Energy-Consumption-Forecasting/scripts/Forecast.R')
runApp('C:/git/Energy-Consumption-Forecasting/scripts/Forecast.R')
runApp('C:/git/Energy-Consumption-Forecasting/scripts/Forecast.R')
runApp('C:/git/Energy-Consumption-Forecasting/scripts/Forecast.R')
runApp('C:/git/Energy-Consumption-Forecasting/scripts/Forecast.R')
rlang::last_trace()
rlang::last_trace(drop = FALSE)
runApp('C:/git/Energy-Consumption-Forecasting/scripts/Forecast.R')
runApp('C:/git/Energy-Consumption-Forecasting/scripts/Forecast.R')
runApp('C:/git/Energy-Consumption-Forecasting/scripts/Forecast.R')
runApp('C:/git/Energy-Consumption-Forecasting/scripts/Forecast.R')
runApp('C:/git/Energy-Consumption-Forecasting/scripts/Energy-Trends.R')
runApp('C:/git/Energy-Consumption-Forecasting/scripts/Energy-Trends.R')
